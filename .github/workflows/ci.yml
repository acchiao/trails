name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# concurrency:
#   group: ${{ github.ref }}
#   cancel-in-progress: false

env:
  PROJECT_NAME: trails

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
          fetch-depth: 0
      - uses: super-linter/super-linter@v7.2.1
        env:
          DEFAULT_BRANCH: main
          DISABLE_ERRORS: true
          VALIDATE_ALL_CODEBASE: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manifests:
    name: Manifests
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - uses: azure/setup-helm@v4.2.0
        with:
          version: 3.8.0
      - uses: helm/kind-action@v1.12.0
      - run: |
          helm lint charts/trails
          helm install test charts/trails
      - name: kube-score
        continue-on-error: true
        run: |
          wget --no-verbose --show-progress --progress dot:giga https://github.com/zegl/kube-score/releases/download/v1.19.0/kube-score_1.19.0_linux_amd64.tar.gz
          echo "a5b10e509bd845f0bc32a529f4e8165c021877f924ee6f6be66678039f75a761  kube-score_1.19.0_linux_amd64.tar.gz" | sha256sum --check
          tar xf kube-score_1.19.0_linux_amd64.tar.gz
          helm template trails charts/trails --values charts/trails/ci.yaml --skip-tests | ./kube-score score - --output-format ci --kubernetes-version 1.32 --ignore-test deployment-has-poddisruptionbudget,deployment-has-host-podantiaffinity,container-security-context-user-group-id,pod-networkpolicy,pod-probes

  build:
    name: Build
    runs-on: ubuntu-24.04
    permissions:
      packages: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        environment: [staging, production]
    environment:
      name: ${{ matrix.environment }}
      url: https://localhost:3000
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - uses: docker/setup-qemu-action@v3.2.0
      - uses: docker/setup-buildx-action@v3.8.0
      - uses: docker/login-action@v3.3.0
        with:
          registry: registry.hub.docker.com
          username: ${{ secrets.REGISTRY_NAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v5.6.1
        id: meta-dockerhub
        with:
          images: |
            registry.hub.docker.com/${{ secrets.REGISTRY_NAME }}/${{ env.PROJECT_NAME }}
          flavor: |
            latest=true
            prefix=
            suffix=
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern=v{{version}}
            type=semver,pattern={{raw}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}.{{minor}}.{{patch}}
            type=sha,prefix=,suffix=,format=long
            type=sha,prefix=,suffix=,format=short
            type=raw,value=${{ matrix.environment }}
      - uses: docker/metadata-action@v5.5.1
        id: meta-ghcr
        with:
          images: |
            gchr.io/${{ github.actor }}/${{ env.PROJECT_NAME }}
          flavor: |
            latest=true
            prefix=
            suffix=
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern=v{{version}}
            type=semver,pattern={{raw}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}.{{minor}}.{{patch}}
            type=sha,prefix=,suffix=,format=long
            type=sha,prefix=,suffix=,format=short
            type=raw,value=${{ matrix.environment }}
      - uses: docker/build-push-action@v6.10.0
        id: build-dockerhub
        with:
          context: .
          file: Dockerfile
          push: true
          target: ${{ matrix.environment }}
          cache-from: type=registry,ref=registry.hub.docker.com/${{ secrets.REGISTRY_NAME }}/${{ env.PROJECT_NAME }}:buildcache
          cache-to: type=registry,ref=registry.hub.docker.com/${{ secrets.REGISTRY_NAME }}/${{ env.PROJECT_NAME }}:buildcache,mode=max
          tags: ${{ steps.meta-dockerhub.outputs.tags }}
          labels: ${{ steps.meta-dockerhub.outputs.labels }}
      - uses: docker/build-push-action@v6.10.0
        id: build-ghcr
        with:
          context: .
          file: Dockerfile
          push: true
          target: ${{ matrix.environment }}
          cache-from: type=registry,ref=ghcr.io/${{ github.actor }}/${{ env.PROJECT_NAME }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.actor }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}:buildcache,mode=max
          tags: ${{ steps.meta-ghcr.outputs.tags }}
          labels: ${{ steps.meta-ghcr.outputs.labels }}
      - run: echo ${{ steps.build-dockerhub.outputs.digest }}
      - run: echo ${{ steps.build-ghcr.outputs.digest }}

  codeql:
    name: CodeQL
    runs-on: ubuntu-24.04
    # needs: [build]
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [javascript]
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3

  brakeman:
    name: Brakeman
    runs-on: ubuntu-24.04
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - uses: ruby/setup-ruby@v1.205.0
        with:
          ruby-version: 3.1.0
          bundler-cache: true
      - run: |
          gem install brakeman --version ${{ env.BRAKEMAN_VERSION }}
          brakeman --format sarif --output output.sarif.json .
        env:
          BRAKEMAN_VERSION: 5.2.1
      # - uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: output.sarif.json
      # - uses: actions/upload-artifact@v4.3.1
      #   with:
      #     name: output.sarif.json
      #     path: output.sarif.json
      #     if-no-files-found: warn
      #     retention-days: 90

  rubocop:
    name: RuboCop
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - uses: ruby/setup-ruby@v1.205.0
        with:
          ruby-version: 3.1.0
          bundler-cache: true
      - run: |
          bundle config set frozen false
          bundle add code-scanning-rubocop --skip-install
          bundle install
          bash -c "
            bundle exec rubocop --require code_scanning --format CodeScanning::SarifFormatter -o rubocop.sarif
            [[ $? -ne 2 ]]
          "
      # - uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: rubocop.sarif
      # - uses: actions/upload-artifact@v4.5.0
      #   with:
      #     name: rubocop.sarif
      #     path: rubocop.sarif
      #     if-no-files-found: warn
      #     retention-days: 90
